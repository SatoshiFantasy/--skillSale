//%import fantasybit

%start StartMap::Init
%class CoinSale
%header CoinSale.h
%package fantasybit

%map StartMap
%%
// State    Transition  End State       Action(s)

Init
{
            Buy             [ !ctxt.HasName() ]
                            NoName { NewNameDialog(); }

            Buy             [ !ctxt.IsSecretVerified() ]
                            WaitingShowAddress	{}

            Buy             WaitingForFunds     {}
}

NoName
{
            Import          WaitingImportConfirm {}

            Claim           WaitingNameConfirm {}

            Select          [ !ctxt.IsSecretVerified() ]
                            WaitingShowAddress	{ }

            Select          WaitingForFunds		{ }

}

WaitingImportConfirm
{

            NameConfimed        WaitingForFunds                 { SetNameIsVerified();
                                                                  }
            NameNotConfimed     NoName  {}
}

WaitingNameConfirm
{
            NameConfimed        [ !ctxt.SecretDisplayed() ]
                                nil                             { DisplaySecretDialog(); }

            SecretOk            WaitingShowAddress     {}

            NameNotConfimed     NoName  {}
}

WaitingShowAddress              Entry                           { DisplayHiddenFundingAddress(); }
{
            ShowAddress         [ !ctxt.IsSecretVerified() ]
                                VerifySecret {}

            ShowAddress		WaitingForFunds {}

}

WaitingForFunds 		Entry                       { DisplayFundingAddress();
                                                              StartCheckFundsTimer(); }
{
            Funded              [ !ctxt.hasUTXO() ]
                                nil {}

            Funded 		[ !ctxt.isConfirmed() ]
                                WaitingConfirm                  { SignSendServer(); }

            Funded 		WaitingExedos           	{ SignSendExedos(); StopCheckFundsTimer(); }
}


VerifySecret				Entry		{ VerifySecretDialog(); }
{
            Verify (secret: const QString &)			[ ctxt.DoVerifySecret(secret) ]
                                                                        WaitingForFunds 			{ SecretIsVerified(); }

            Verify (secret: const QString &)			nil                                     { VerifyError(); }

            Forgot                 WaitingNameConfirm                                       { DisplaySecretDialog(); }
}

WaitingConfirm
{
            Funded 			[ !ctxt.isConfirmed() ]  nil {}

            Funded 			WaitingExedos 		{ SignSendExedos(); StopCheckFundsTimer(); }
}

WaitingExedos
            Entry			{ DisplayAddressBalance(); StartCheckExedosTimer(); }
            Exit			{ StopCheckExedosTimer(); }
{
            ExedosReceived		[ ctxt.isEqualFundedAmount() ]
                            WaitingPacks	{ DisplayAddressBalance(); }

            ExedosReceived		nil			{ DisplayAddressBalance(); }

}

WaitingPacks
            Entry			{ DisplayAddressPacksBalance(); StartCheckPacksTimer(); }
            Exit			{ StopCheckPacksTimer(); }
{
            PacksConfirmed	[ !ctxt.isPacksEqualExedosAmount()]
                            nil				{ RequestNewPacks(); }

            PacksConfirmed	Init 	{ SetVerifySecret(ctxt.isNameNew()); }
}

Default
{
            Forgot                 nil          { DisplaySecretDialog(); }
            Buy   nil {}
            Import   nil {}
            Claim   nil {}
            Select   nil {}
            NameConfimed   nil {}
            SecretOk   nil {}
            ShowAddress   nil {}
            NameNotConfimed   nil {}
            Funded   nil {}
            Verify   nil {}
            ExedosReceived   nil {}
            PacksConfirmed   nil {}

}

%%
